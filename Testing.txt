## ------------------------------------------------------------------------------##
##
## Testing adding through UpdateDatabase
##
## ------------------------------------------------------------------------------##


## In sqlite3 -- delete random rows

sqlite3 db.sqlite3
delete from maintainers where id in (3,49,100);

## UpdateDataase.R should re-add deleted entrieswhen run
## Check sqlite3 database


## ------------------------------------------------------------------------------##
##
##  Testing adding through API
##
## ------------------------------------------------------------------------------##

## In R
library(jsonlite)
library(httr2)
maintainers <- list(
    list(package = "pkgA", name = "Alice Example", email = "alice@example.com"),
    list(package = "pkgB", name = "Bob Example", email = "bob@example.com"),
    list(package = "pkgC", name = "Carol Example", email = "carol@example.com"),
    list(package = "pkgD", name = "Carol Example", email = "carol@example.com")
)
json_payload <- toJSON(maintainers, pretty = TRUE, auto_unbox = TRUE)
## write(json_payload, file = "mock_maintainers.json")

# Your endpoint URL
endpoint <- "http://127.0.0.1:4567/add-entries"

# Make POST request
response <- request(endpoint) %>%
  req_headers("Content-Type" = "application/json") %>%
  req_body_raw(json_payload) %>%
  req_perform()

resp_status(response)
resp_body_string(response)

## Check sqlite3 database


## ------------------------------------------------------------------------------##
##
##  Testing removing stale entries (removed packages)
##
## ------------------------------------------------------------------------------##

## If the above adding mock data worked, running UpdateDatase.R should remove
##   mock entries
## Check sqlite3 database


## ------------------------------------------------------------------------------##
##
##  Testing sending email verification 
##
## ------------------------------------------------------------------------------##

## ensure the following is set else ses will send email 
export SEND_VERIFICATION_EMAILS = false

## If needed plant some email verification dates
sqlite3 db.sqlite3
UPDATE maintainers set consent_date='2024-02-14' where package='BiocFileCache';

## Run UpdateDatase.R

## OR 

## In R
library(httr2)
library(jsonlite)
library(dplyr)
json_payload <- toJSON(jsonlite::read_json("mock_verification.json"), pretty = TRUE, auto_unbox = TRUE)
url_base = "http://127.0.0.1:4567"
email_url <- paste0(url_base, "/send-verification")
response <- request(email_url) %>%
      req_headers("Content-Type" = "application/json") %>%
      req_body_raw(json_payload) %>%
      req_perform()
resp_status(response)
resp_body_string(response)



## ------------------------------------------------------------------------------##
##
##  Testing accept policy link
##
## ------------------------------------------------------------------------------##

## grab this from testing the mock email validation section after changing
## database consent_date. Something like:
library(httr2)

endpoint_url <- "http://127.0.0.1:4567/acceptpolicies/lori.shepherd@roswellpark.org/accept/2bed68d404b1e0ab30e0394abb8868448173f616"
response <- request(endpoint_url) %>%
  req_perform()

resp_status(response)
resp_body_string(response)

## check sqlite database


## ------------------------------------------------------------------------------##
##
##  Testing Update Name
##
## ------------------------------------------------------------------------------##

## No good way to do this beside manually running through UpdateDatabase.R
## And after email_df gets created. Change a name

## ------------------------------------------------------------------------------##
##
##  Testing other endpoints
##
## ------------------------------------------------------------------------------##
library(dplyr)
library(stringr)
library(RSQLite)
library(DBI)
library(jsonlite)
library(httr2)

## Add mock entries in R
maintainers <- list(
    list(package = "pkgA", name = "Alice Example", email = "alice@example.com"),
    list(package = "pkgB", name = "Bob Example", email = "bob@example.com"),
    list(package = "pkgC", name = "Carol Example", email = "carol@example.com"),
    list(package = "pkgD", name = "Carol Example", email = "carol@example.com")
)
json_payload <- toJSON(maintainers, pretty = TRUE, auto_unbox = TRUE)
endpoint <- "http://127.0.0.1:4567/add-entries"
response <- request(endpoint) %>%
  req_headers("Content-Type" = "application/json") %>%
  req_body_raw(json_payload) %>%
  req_perform()
resp_status(response)
resp_body_string(response)

con <- dbConnect(RSQLite::SQLite(), "db.sqlite3")
dbExecute(con, "UPDATE maintainers SET is_email_valid=0 where package='pkgA'")
dbExecute(con, "UPDATE maintainers SET is_email_valid=0 where package='pkgC'")
dbExecute(con, "UPDATE maintainers SET consent_date='2024-02-14' where package='pkgB'")
dbExecute(con, "UPDATE maintainers SET consent_date='2024-02-14' where package='pkgC'")
dbDisconnect(con)


endpoint_url = "http://127.0.0.1:4567/list/invalid/"
response <- request(endpoint_url) %>% req_perform()
resp_status(response)
resp_body_string(response)

endpoint_url = "http://127.0.0.1:4567/list/needs-consent/"
response <- request(endpoint_url) %>% req_perform()
resp_status(response)
resp_body_string(response)

endpoint_url = "http://127.0.0.1:4567/list/bademails/"
response <- request(endpoint_url) %>% req_perform()
resp_status(response)
resp_body_string(response)

endpoint_url = "http://127.0.0.1:4567/info/package/BiocFileCache"
response <- request(endpoint_url) %>% req_perform()
resp_status(response)
resp_body_string(response)

endpoint_url = "http://127.0.0.1:4567/info/email/maintainer@bioconductor.org"
response <- request(endpoint_url) %>% req_perform()
resp_status(response)
resp_body_string(response)

endpoint_url = URLencode("http://127.0.0.1:4567/info/name/Lori Shepherd")
response <- request(endpoint_url) %>% req_perform()
resp_status(response)
resp_body_string(response)

endpoint_url = URLencode("http://127.0.0.1:4567/info/name/H. Pages")
response <- request(endpoint_url) %>% req_perform()
resp_status(response)
resp_body_string(response)

endpoint_url = URLencode("http://127.0.0.1:4567/info/name/Hervé Pagès")
response <- request(endpoint_url) %>% req_perform()
resp_status(response)
resp_body_string(response)

endpoint_url = "http://127.0.0.1:4567/info/valid/maintainer@bioconductor.org"
response <- request(endpoint_url) %>% req_perform()
resp_status(response)
resp_body_string(response)

endpoint_url = "http://127.0.0.1:4567/info/valid/carol@example.com"
response <- request(endpoint_url) %>% req_perform()
resp_status(response)
resp_body_string(response)

## ------------------------------------------------------------------------------##
##
##  Testing json dump of database
##
## ------------------------------------------------------------------------------##


endpoint_url = "http://127.0.0.1:4567/download-maintainer-db"
response <- request(endpoint_url) %>% req_perform()
resp_status(response)
resp_body_string(response)


###############################################
## ------------------------------------------------------------------------------##
##
##  Testing bounce and complaint
##    NOTE:  This has to be done on live instance as aws requires public IP
##
## ------------------------------------------------------------------------------##

## In sqlite3 database plant test emails
INSERT INTO maintainers (package, name, email, consent_date, email_status,
is_email_valid) VALUES ('TestPkg2', 'Simulated User 2',
'bounce@simulator.amazonses.com', DATE('now'), 'sent', 1);

INSERT INTO maintainers (package, name, email, consent_date, email_status,
is_email_valid) VALUES ('TestPkg3', 'Simulated User 3',
'complaint@simulator.amazonses.com', DATE('now'), 'sent', 1);

## In bash
export SEND_VERIFICATION_EMAILS=true

## In irb ruby
require_relative './core'
Core.send_email(
   "bioc-validation-noreply@bioconductor.org",
   "bounce@simulator.amazonses.com",
   "Bounce Test",
   "Test for bounce handling"
)

Core.send_email(
   "bioc-validation-noreply@bioconductor.org",
   "complaint@simulator.amazonses.com",
   "Complaint Test",
   "Testing complaint handling in BioconductorMaintainerValidation"
)
